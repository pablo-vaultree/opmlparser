{
  "name": "opmlparser",
  "author": {
    "name": "Dan MacTough",
    "email": "danmactough@gmail.com"
  },
  "description": "OPML parsing using sax js",
  "version": "0.5.0",
  "homepage": "http://github.com/danmactough/node-opmlparser",
  "repository": {
    "type": "git",
    "url": "git://github.com/danmactough/node-opmlparser.git"
  },
  "bugs": {
    "url": "http://github.com/danmactough/node-opmlparser/issues"
  },
  "keywords": [
    "opml",
    "feed",
    "outline",
    "xml",
    "syndication"
  ],
  "main": "./main.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "sax": "0.5.x",
    "request": "2.9.x"
  },
  "devDependencies": {
    "mocha": "~1.9.0"
  },
  "scripts": {
    "test": "make test"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/danmactough/node-opmlparser.png?branch=refactor)](https://travis-ci.org/danmactough/node-opmlparser)\n#  Opmlparser - OPML parsing in Node.js\n\nThis module adds methods for OPML parsing in node.js using Isaac Schlueter's [sax](https://github.com/isaacs/sax-js) parser.\n\n## Requirements\n\n- [sax](https://github.com/isaacs/sax-js)\n- [request](https://github.com/mikeal/request)\n\n## Installation\n\n    npm install opmlparser\n\n## Changes since v0.4.x\n\n- New preferred API -- just `.pipe()` in a [readable stream](http://nodejs.org/api/stream.html#stream_readable_stream).\n- The `end` event passes no arguments; use `complete` if you want `meta`, `feeds`, and `outline`. `end` will be emitted even when there's been a fatal error.\n- All properties are **only lowercase**; no camelCase\n- You no longer create your own Opmlparser instance; just use the methods directly (while they last; they'll likely be gone in the next minor version)\n\n```js\n\nvar OpmlParser = require('opmlparser')\n  , request = require('request');\n\nrequest('http://someopmlurl.opml')\n  .pipe(new OpmlParser([options]))\n  .on('error', function(error) {\n    // always handle errors\n  })\n  .on('meta', function (meta) {\n    // do something\n  })\n  .on('feed', function (feed) {\n    // do something else\n  });\n  .on('outline', function (outline) {\n    // do something else\n  });\n  .on('end', function () {\n   // do the next thing\n  });\n```\n\n### options\n\n- `addmeta` - Set to `false` to override Opmlparser's default behavior, which\n  is to add the OPML's `meta` information to each `feed`.\n\n- `opmlurl` - The url (string) of the OPML. Opmlparser is very good at\n  resolving relative urls in OPML files. But OPML files could use relative urls without\n  declaring the `xml:base` attribute any place in the file. This is perfectly\n  valid, but we don't know know the file's url before we start parsing the file\n  and trying to resolve those relative urls. If we discover the file's url, we\n  will go back and resolve the relative urls we've already seen, but this takes\n  a little time (not much). If you want to be sure we never have to re-resolve\n  relative urls (or if Opmlparser is failing to properly resolve relative urls),\n  you should set the `opmlurl` option. Otherwise, feel free to ignore this option.\n\n## libxml-like Helper Methods (deprecated)\n\n### parser.parseString(string, [options], [callback])\n\n- `string` - the contents of the file\n\n### parser.parseFile(filename, [options], [callback])\n\n- `filename` - a local filename or remote url\n\n### parser.parseUrl(url, [options], [callback])\n\nThe first argument can be either a url or a `request` options object. The only\nrequired option is uri, all others are optional. See\n[request](https://github.com/mikeal/request#requestoptions-callback) for details\nabout what that `request` options object might look like.\n\n- `url` - fully qualified uri or a parsed url object from url.parse()\n\n### parser.parseStream(readableStream, [options], [callback])\n\n- `readableStream` - a [Readable Stream](http://nodejs.org/api/stream.html#stream_readable_stream)\n\n## Examples\n\nSee the [examples](examples/) directory.\n\nDeprecated libxml-style examples are [here](examples-old.md).\n\n## What is the parsed output produced by opmlparser?\n\nOpmlparser parses each OPML file into a `meta` portion, a `feeds` portion, and an\n`outline` portion.\n\nThe `meta` will be the information in the OPML's `<head>` element, plus some\nadditional metadata, such as OPML version, any namespaces defined, etc.\n\nIf the OPML is a subscription list, the `feeds` will contain an array of objects\nrepresenting each feed. If the OPML is not a subscription list, `feeds` will be\n`null`. When opmlparser is used as an event emitter, each `feed` is\nemitted as a 'feed' event.\n\nThe `outline` will simply translate the OPML's `<body>` from XML to a Javascript\nobject (i.e., JSON), preserving the tree structure, if any.\n\n### List of meta propreties\n\nNo validation is performed. Each of the meta properties will be defined, but any\nof them may be `null`.\n\n* title\n* datecreated\n* datemodified\n* ownername\n* ownerid\n* docs\n* expansionstate\n* vertscrollstate\n* windowtop\n* windowleft\n* windowbottom\n* windowright\n\n### List of feed properties\n\nNo validation is performed. Any or all of the following properties may be\nabsent, and other arbitrary (and invalid) properties may be present.\n\n* title\n* text\n* xmlurl\n* htmlurl\n* description\n* type\n* language\n* version\n\nSee the [OPML Spec](http://dev.opml.org/spec2.html) for more info about what to\nexpect to see in various kinds of OPML files.\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Dan MacTough <danmactough@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "opmlparser@0.5.0",
  "dist": {
    "shasum": "fe61129cb741d1706cda8f7b8255edfc54020794"
  },
  "_from": "opmlparser@",
  "_resolved": "https://registry.npmjs.org/opmlparser/-/opmlparser-0.5.0.tgz"
}
